yak <- DNAString(alignment[12])
pse <- DNAString(alignment[14])
mel
con <- file("/home/sarah/utilities/play-1.2.7/sox_sites/analysis/Sequences/site_alignments/Dichaete/5-HT1A.53C03.781.fasta")
alignment <- readLines(con)
node3 <- DNAString(alignment[3])
node2 <- DNAString(alignment[5])
node1 <- DNAString(alignment[7])
mel <- DNAString(alignment[9])
sim <- DNAString(alignment[11])
yak <- DNAString(alignment[14])
pse <- DNAString(alignment[15])
yak <- DNAString(alignment[13])
if (alignment[1] == "R") {
node3 <- reverseComplement(node3)
node2 <- reverseComplement(node2)
node1 <- reverseComplement(node1)
mel <- reverseComplement(mel)
sim <- reverseComplement(sim)
yak <- reverseComplement(yak)
# Read in alignments, store as biostrings
}
mel
con <- file("/home/sarah/utilities/play-1.2.7/sox_sites/analysis/Sequences/site_alignments/Dichaete/5-HT1A.53C10.2258.fasta")
alignment <- readLines(con)
node3 <- DNAString(alignment[3])
node2 <- DNAString(alignment[5])
node1 <- DNAString(alignment[7])
mel <- DNAString(alignment[9])
sim <- DNAString(alignment[11])
yak <- DNAString(alignment[13])
pse <- DNAString(alignment[15])
# If strand = R, take reverse complement
if (alignment[1] == "R") {
node3 <- reverseComplement(node3)
node2 <- reverseComplement(node2)
node1 <- reverseComplement(node1)
mel <- reverseComplement(mel)
sim <- reverseComplement(sim)
yak <- reverseComplement(yak)
pse <- reverseComplement(pse)
}
mel
align <- DNAStringSet(c(node3, node2, node1, mel, sim, yak, pse))
align
align <- DNAStringSet(node3, node2, node1, mel, sim, yak, pse)
align <- DNAStringSet(c(node3, node2, node1, mel, sim, yak, pse), width=8)
align <- DNAStringSet(c(node3, node2, node1, mel, sim, yak, pse), start=NA, width=8)
align <- DNAStringSet(c(node3, node2, node1, mel, sim, yak, pse), start="NA", width=8)
align <- DNAStringSet(c(node3, node2, node1, mel, sim, yak, pse), start=c(0, 8, 16, 24, 32, 40, 48), width=8)
align <- DNAStringSet(c(node3, node2, node1, mel, sim, yak, pse), start=c(0, 8, 16, 24, 32, 40, 48), width=(8, 8, 8, 8, 8, 8, 8)
align <- DNAStringSet(c(node3, node2, node1, mel, sim, yak, pse), start=c(0, 8, 16, 24, 32, 40, 48), width=(8, 8, 8, 8, 8, 8, 8))
align <- DNAStringSet(c(node3, node2, node1, mel, sim, yak, pse), start=c(0, 8, 16, 24, 32, 40, 48), width=(8,8,8,8,8,8,8))
align <- DNAStringSet(node3)
align <- DNAStringSet(node2)
align
align <- DNAStringSet(c(node3, node2, node1, mel, sim, yak, pse)
)
align
?sapply
?tapply
?apply
?vector
?sapply
pse.len()
??length
length(mel)
nts <- [1:length(mel)]
nts <- c(1:length(mel))
nts
?sapply
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
dS_list
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
rm(calc_dS)
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
library(Biostrings)
# Define background frequences of A, C, T and G (in this case, background Drosophila noncoding frequences from RSAT)
bg_freqs <- matrix(c(0.30319,0.20103,0.19882,0.29697), nrow=1, ncol=4, byrow=TRUE, dimnames=list(c("Frequency"), c("A", "C", "G", "T")))
# Define PWMs for sites of interest
D_matrix <- matrix(c(0.001,0.569,0.264,0.166, 0.007,0.797,0.071,0.125, 0.435,0.067,0.062,0.436, 0.001,0.001,0.057,0.941, 0.209,0.001,0.001,0.789, 0.001,0.001,0.997,0.001, 0.001,0.001,0.001,0.997, 0.125,0.199,0.235,0.441), nrow=8, ncol=4, byrow=TRUE, dimnames= list(c("1", "2", "3", "4", "5", "6", "7", "8"), c("A", "C", "G","T")))
SoxN_matrix <- matrix(c(0.355,0.217,0.274,0.155, 0.208,0.213,0.521,0.058, 0.253,0.284,0.399,0.064, 0.805,0.087,0.107,0.001, 0.304,0.614,0.001,0.081, 0.997,0.001,0.001,0.001, 0.997,0.001,0.001,0.001, 0.838,0.001,0.001,0.160, 0.312,0.082,0.502,0.104, 0.001,0.001,0.965,0.033), nrow=10, ncol=4, byrow=TRUE, dimnames= list(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10"), c("A", "C", "G","T")))
# Define which PWM model to use
f <- D_matrix
# Read in alignments, store as biostrings
con <- file("/home/sarah/utilities/play-1.2.7/sox_sites/analysis/Sequences/site_alignments/Dichaete/5-HT1A.53C10.434.fasta")
alignment <- readLines(con)
node3 <- DNAString(alignment[3])
node2 <- DNAString(alignment[5])
node1 <- DNAString(alignment[7])
mel <- DNAString(alignment[9])
sim <- DNAString(alignment[11])
yak <- DNAString(alignment[13])
pse <- DNAString(alignment[15])
# If strand = R, take reverse complement
if (alignment[1] == "R") {
node3 <- reverseComplement(node3)
node2 <- reverseComplement(node2)
node1 <- reverseComplement(node1)
mel <- reverseComplement(mel)
sim <- reverseComplement(sim)
yak <- reverseComplement(yak)
pse <- reverseComplement(pse)
}
align <- DNAStringSet(c(node3, node2, node1, mel, sim, yak, pse))
dS_list <- 0
# Identify substitutions (what to do for gaps?)
find_subst <- function(col, dS_list) {
node3_nt <- node3[col]
node2_nt <- node2[col]
node1_nt <- node1[col]
mel_nt <- mel[col]
sim_nt <- sim[col]
yak_nt <- yak[col]
pse_nt <- pse[col]
if (pse_nt == node3_nt) {
} else {
nt1 <- node3_nt
nt2 <- pse_nt
pos <- col
dS <- calc_dS(nt1, nt2, pos, bg_freqs, D_matrix)
dS_list <- c(dS_list, dS)
}
if (yak_nt == node2_nt) {
} else {
nt1 <- node2_nt
nt2 <- yak_nt
pos <- col
dS <- calc_dS(nt1, nt2, pos, bg_freqs, D_matrix)
dS_list <- c(dS_list, dS)
}
if (sim_nt == node1_nt) {
} else {
nt1 <- node1_nt
nt2 <- sim_nt
pos <- col
dS <- calc_dS(nt1, nt2, pos, bg_freqs, D_matrix)
dS_list <- c(dS_list, dS)
}
if (mel_nt == node1_nt) {
} else {
nt1 <- node1_nt
nt2 <- mel_nt
pos <- col
dS <- calc_dS(nt1, nt2, pos, bg_freqs, D_matrix)
dS_list <- c(dS_list, dS)
}
return(dS_list)
}
calc_dS <- function(nt1, nt2, pos, bg_freqs, D_matrix) {
g_nt1 <- bg_freqs[, nt1]
g_nt2 <- bg_freqs[, nt2]
f_nt1 <- f[pos, nt1]
f_nt2 <- f[pos, nt2]
dS <- log(f_nt2/g_nt2) - log(f_nt1/g_nt1)
return(dS)
}
nts <- c(1:length(mel))
dS_list <- sapply(nts, find_subst, dS_list)
dS_list
node3_nt <- node3[col]
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
class(nt1)
class(nt2)
class(pos)
class(bg_freqs)
class(D_matrix)
calc_dS <- function(nt1, nt2, pos, bg_freqs, D_matrix) {
g_nt1 <- bg_freqs[, nt1]
g_nt2 <- bg_freqs[, nt2]
f_nt1 <- f[pos, nt1]
f_nt2 <- f[pos, nt2]
dS <- log(f_nt2/g_nt2) - log(f_nt1/g_nt1)
return(dS)
}
calc_dS("A", "C", 3, bg_freqs, D_matrix)
con <- file("/home/sarah/utilities/play-1.2.7/sox_sites/analysis/Sequences/site_alignments/Dichaete/5-HT1A.53C10.434.fasta")
alignment <- readLines(con)
node3 <- DNAString(alignment[3])
node2 <- DNAString(alignment[5])
node1 <- DNAString(alignment[7])
mel <- DNAString(alignment[9])
sim <- DNAString(alignment[11])
yak <- DNAString(alignment[13])
pse <- DNAString(alignment[15])
# If strand = R, take reverse complement
if (alignment[1] == "R") {
node3 <- reverseComplement(node3)
node2 <- reverseComplement(node2)
node1 <- reverseComplement(node1)
mel <- reverseComplement(mel)
sim <- reverseComplement(sim)
yak <- reverseComplement(yak)
pse <- reverseComplement(pse)
}
node3_nt <- node3[1]
node3_nt
node3
as.character(node3)
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
node3[0]
node3[1]
node3
node3[, 1]
node3[1, ]
node3[1]
node3_nt
as.character(node3_nt)
node3[1]
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
dS_total
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
dS_total
dS_counter
dS_avg = dS_total / dS_counter
dS_avg
D_matrix
node3
node2
node1
mel
sim
yak
pse
istrue <- (node3 == pse)
isture
istrue
istrue <- (yak == node2)
istrue
find_subst <- function(col, dS_total, dS_counter) {
}
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
dS_avg
find_subst(1, 0, 0)
dS_list <- find_subst(1, 0, 0)
dS_list[1]
dS_list[2]
find_subst(2, 0, 0)
find_subst(3, 0, 0)
find_subst(4, -1.526252, 1.00000)
find_subst(5, -1.526252, 1.00000)
find_subst(6, -1.526252, 1.00000)
find_subst(7, -1.526252, 1.00000)
find_subst(8, -1.526252, 1.00000)
calc_dS("A", "G", 3, bg_freqs, D_matrix)
f_nt1
g_nt1
f_nt2
g_nt2
0.062/.19882
log(0.3118399)
?log
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
dS_avg
dS_total
dS_counter
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
dS_avg
dS_total
dS_counter
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
dS_avg
dS_total
dS_counter
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
dS_avg
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
dS_data
f
D_matrix
SoxN_matrix
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
f
dS_data
hist(dS_data$dS)
SoxN_high <- dS_data[dS_data$dS > -5.0, ]
summary(SoxN_high)
SoxN_low <- dS_data[dS_data$dS <= -5.0]
SoxN_low <- dS_data[dS_data$dS <= -5.0, ]
summary(SoxN_low)
SoxN_high[SoxN_high$Name == "lea.28F02", ]
SoxN_low[SoxN_low$Name=="lea.28F02", ]
SoxN_high[SoxN_high$Name == "jumu.81F05", ]
hist(dS_data[dS_data$Name=="jumu.81F05"])
hist(dS_data[dS_data$Name=="jumu.81F05", dS])
hist(dS_data[dS_data$Name=="jumu.81F05", 3])
jumu <- hist(dS_data[dS_data$Name=="jumu.81F05", 3])
jumu
jumu <- dS_data[dS_data$Name=="jumu.81F05", ]
jumu
jumu.len
??data.frame
length(jumu)
nrow(jumu)
enhancer <- dS_data[dS_data$Name=="jumu.81F05", 3]
N <- nrow(enhancer)
N
enhancer
enhancer <- dS_data[dS_data$Name=="jumu.81F05", ]
N <- nrow(enhancer)
N
E_dS <- -3.06467162201556
V_dS <- 8.71182428167666
sum <- 0
for (k in 1:N) {
sum = (enhancer[k, 3] - E_dS) + sum
}
sum
?sqrt
Z <- ((1/N)*sum)/sqrt(V_dS/N)
Z
?Ztes
??ztest
??onetail
help"one tail test"
?quantile
?dnorm
pnorm(2.48)
pnorm(2.48, lower.tail=TRUE)
pnorm(2.48, lower.tail=FALSE)
pnorm(2.53)
pnorm(2.53, lower.tail=FALSE)
pnorm(0.97, lower.tail=FALSE)
sqrt(1)
Z
pnorm(Z, lower.tail=FALSE)
unique(dS_data$Names)
unique(dS_data$Name)
enhancers <- unique(dS_data$Name)
enhancers
?unique
??type
typeof(unique)
typeof(enhancers)
enhancers
typeof(enhancer)
typeof(enhancers)
for (e in enhancers) {
enhancer <- e
enhancer <- e
N <- nrow(enhancer)
E_dS <- -3.06467162201556
}
for (e in enhancers) {
}
for (e in enhancers) {
enhancer <- dS_data[dS_data$Name==e, ]
N <- nrow(enhancer)
E_dS <- -3.06467162201556
V_dS <- 8.71182428167666
sum <- 0
for (k in 1:N) {
sum = (enhancer[k, 3] - E_dS) + sum
}
Z <- ((1/N)*sum)/sqrt(V_dS/N)
p <- pnorm(Z, lower.tail=FALSE)
enhancer_pvalues <- rbind(enhancer_pvalues, data.frame(Name=e, Z=Z, p=p))
}
enhancer_pvalues <- data.frame(Name=charater(),
Z=double(),
p=double(),
stringsAsFactors=FALSE)
enhancer_pvalues <- data.frame(Name=character(),
Z=double(),
p=double(),
stringsAsFactors=FALSE)
for (e in enhancers) {
enhancer <- dS_data[dS_data$Name==e, ]
enhancer <- dS_data[dS_data$Name==e, ]
N <- nrow(enhancer)
}
enhancer_pvalues <- data.frame(Name=character(),
Z=double(),
p=double(),
stringsAsFactors=FALSE)
for (e in enhancers) {
enhancer <- dS_data[dS_data$Name==e, ]
N <- nrow(enhancer)
E_dS <- -3.06467162201556
V_dS <- 8.71182428167666
sum <- 0
for (k in 1:N) {
sum = (enhancer[k, 3] - E_dS) + sum
}
Z <- ((1/N)*sum)/sqrt(V_dS/N)
p <- pnorm(Z, lower.tail=FALSE)
enhancer_pvalues <- rbind(enhancer_pvalues, data.frame(Name=e, Z=Z, p=p))
}
enhancer_pvalues
enhancer_pvalues[enhancer_pvalues$p <= 0.05, ]
pnorm(2.53, lower.tail=FALSE)
?rnorm
qnorm(2.53)
pnorm(2.53)
1 - pnorm(2.53)
1 - pnorm(2.53, lower.tail = FALSE)
pnorm(2.53, lower.tail = FALSE)
pnorm(2.53, lower.tail = FALSE)
pnorm(2.53, lower.tail = TRUE)
pnorm(2.53, lower.tail = TRUE)
1 - pnorm(2.53, lower.tail = TRUE)
qnorm(1.96)
pnorm(1.96)
1 - pnorm(23.35, lower.tail = TRUE)
1 - pnorm(3.35, lower.tail = TRUE)
enhancer_pvalues[enhancer_pvalues$p <= 0.1, ]
enhancer_pvalues[enhancer_pvalues$p <= 0.01, ]
write.table(enhancer_pvalues, file="/home/sarah/utilities/play-1.2.7/sox_sites/analysis/Stats/SoxN_enhancer_pvalues.txt", sep=",")
source('~/utilities/play-1.2.7/sox_sites/analysis/Code/R_scripts/affinity_model.R')
enhancer_pvalues
dS_data
summary(dS_data)
hist(dS_data$dS)
D_high <- dS_data[dS_data$dS > -5.0, ]
D_low <- dS_data[dS_data$dS <= -5.0, ]
hist(D_high$dS)
hist(D_low$dS)
summary(D_high)
summary(D_low)
enhancer_pvalues <- data.frame(Name=character(),
Z=double(),
p=double(),
stringsAsFactors=FALSE)
enhancer_pvaules
enhancer_pvalues
for (e in enhancers) {
enhancer <- dS_data[dS_data$Name==e, ]
N <- nrow(enhancer)
E_dS <- -3.71980334172789
V_dS <- 9.06507252807775
sum <- 0
for (k in 1:N) {
sum = (enhancer[k, 3] - E_dS) + sum
}
Z <- ((1/N)*sum)/sqrt(V_dS/N)
p <- pnorm(Z, lower.tail=FALSE)
enhancer_pvalues <- rbind(enhancer_pvalues, data.frame(Name=e, Z=Z, p=p))
}
enhancer_pvalues
enhancer
enhancers
enhancers <- unique(dS_data$name, )
enhancers
enhancers <- unique(dS_data$Name, )
enhancers
enhancer_pvalues <- data.frame(Name=character(),
Z=double(),
p=double(),
stringsAsFactors=FALSE)
enhancers <- unique(dS_data$Name, )
for (e in enhancers) {
enhancer <- dS_data[dS_data$Name==e, ]
N <- nrow(enhancer)
E_dS <- -3.71980334172789
V_dS <- 9.06507252807775
sum <- 0
for (k in 1:N) {
sum = (enhancer[k, 3] - E_dS) + sum
}
Z <- ((1/N)*sum)/sqrt(V_dS/N)
p <- pnorm(Z, lower.tail=FALSE)
enhancer_pvalues <- rbind(enhancer_pvalues, data.frame(Name=e, Z=Z, p=p))
Z=double(),
enhancer_pvalues <- data.frame(Name=character(),
Z=double(),
p=double(),
stringsAsFactors=FALSE)
enhancers <- unique(dS_data$Name, )
for (e in enhancers) {
enhancer <- dS_data[dS_data$Name==e, ]
N <- nrow(enhancer)
E_dS <- -3.71980334172789
V_dS <- 9.06507252807775
sum <- 0
for (k in 1:N) {
sum = (enhancer[k, 3] - E_dS) + sum
}
Z <- ((1/N)*sum)/sqrt(V_dS/N)
p <- pnorm(Z, lower.tail=FALSE)
enhancer_pvalues <- rbind(enhancer_pvalues, data.frame(Name=e, Z=Z, p=p))
}
summary(enhancer_pvaules)
summary(enhancer_pvalues)
enhancer_pvalues
enhancer_pvalues[p < 0.05, ]
enhancer_pvalues[enhancer_pvalues$p < 0.05, ]
enhancer_pvalues[enhancer_pvalues$p < 0.01, ]
hist(enhancer_pvalues)
hist(enhancer_pvalues$p)
hist(enhancer_pvalues$Z)
hist(enhancer_pvalues$p)
save.image()
write.table(enhancer_pvalues, file="/home/sarah/utilities/play-1.2.7/sox_sites/analysis/Stats/Dichaete_enhancer_pvalues.txt", sep=",")
source("http://bioconductor.org/biocLite.R")
R_HOME
.Library
.libPaths()
sudo source("http://bioconductor.org/biocLite.R")
pwd
pwd()
getwd()
setwd("/home/sarah/utilities/play-1.2.7/sox_sites/analysis")
load("/home/sarah/utilities/play-1.2.7/sox_sites/analysis/.RData")
